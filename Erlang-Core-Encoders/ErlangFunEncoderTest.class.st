"
An ErlangFunEncoderTest is a test class for testing the behavior of ErlangFunEncoder
"
Class {
	#name : #ErlangFunEncoderTest,
	#superclass : #TestCase,
	#category : #'Erlang-Core-Encoders-Tests'
}

{ #category : #tests }
ErlangFunEncoderTest >> testDecode [
	"comment stating purpose of message"
	
	| decoded |
	
	" this one comes from "
	" F = fun(X) -> X end."
	" term_to_binary(F)."

	decoded := ErlangTermEncoder fromByteArray: #[112 0 0 2 212 1 189 144 182 154 187 236 207 96 89 18 34 161 52 152 16 
  216 0 0 0 6 0 0 0 1 100 0 8 101 114 108 95 101 118 97 108 97 6 98 5 236 133 
  180 103 100 0 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 
  134 0 0 0 0 0 104 4 106 104 2 100 0 4 101 118 97 108 112 0 0 1 215 3 187 128 
  53 144 134 52 31 81 99 175 208 84 132 182 44 254 0 0 0 21 0 0 0 4 100 0 5 
  115 104 101 108 108 97 21 98 5 220 1 172 103 100 0 13 110 111 110 111 100 
  101 64 110 111 104 111 115 116 0 0 0 134 0 0 0 0 0 104 2 100 0 5 118 97 108 
  117 101 112 0 0 0 96 2 187 128 53 144 134 52 31 81 99 175 208 84 132 182 44 
  254 0 0 0 5 0 0 0 1 100 0 5 115 104 101 108 108 97 5 98 5 220 1 172 103 100 
  0 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 134 0 0 0 0 0 
  103 100 0 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 60 0 0 
  0 0 0 114 0 3 100 0 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 
  0 1 171 223 171 174 0 1 139 67 165 69 112 0 0 0 235 1 187 128 53 144 134 52 
  31 81 99 175 208 84 132 182 44 254 0 0 0 12 0 0 0 3 100 0 5 115 104 101 108 
  108 97 12 98 5 220 1 172 103 100 0 13 110 111 110 111 100 101 64 110 111 104 
  111 115 116 0 0 0 134 0 0 0 0 0 104 2 100 0 5 118 97 108 117 101 112 0 0 0 
  96 2 187 128 53 144 134 52 31 81 99 175 208 84 132 182 44 254 0 0 0 5 0 0 0 
  1 100 0 5 115 104 101 108 108 97 5 98 5 220 1 172 103 100 0 13 110 111 110 
  111 100 101 64 110 111 104 111 115 116 0 0 0 134 0 0 0 0 0 103 100 0 13 110 
  111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 60 0 0 0 0 0 114 0 3 
  100 0 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 1 171 223 
  171 174 0 1 139 67 165 69 103 100 0 13 110 111 110 111 100 101 64 110 111 
  104 111 115 116 0 0 0 60 0 0 0 0 0 103 100 0 13 110 111 110 111 100 101 64 
  110 111 104 111 115 116 0 0 0 60 0 0 0 0 0 104 2 100 0 5 118 97 108 117 101 
  112 0 0 0 96 2 187 128 53 144 134 52 31 81 99 175 208 84 132 182 44 254 0 0 
  0 5 0 0 0 1 100 0 5 115 104 101 108 108 97 5 98 5 220 1 172 103 100 0 13 110 
  111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 134 0 0 0 0 0 103 100 0 
  13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 60 0 0 0 0 0 108 
  0 0 0 1 104 5 100 0 6 99 108 97 117 115 101 97 1 108 0 0 0 1 104 3 100 0 3 
  118 97 114 97 1 100 0 1 88 106 106 108 0 0 0 1 104 3 100 0 3 118 97 114 97 1 
  100 0 1 88 106 106].

	self assert: decoded equals: (
		(ErlangFun new) pid: (ErlangPid tag: 103 node: #'nonode@nohost' id: 134 serial: 0 creation: 0);
				module: #erl_eval; index: 6; oldIndex: 6; uniq: 99386804;
				freeVars: decoded freeVars; 
				arity: 1; 
				md5: decoded md5 ).
							
						
					
				
]

{ #category : #tests }
ErlangFunEncoderTest >> testEncodeTo [
	"comment stating purpose of message"
	
	| decoded erlFun |
	
	" this one comes from "
	" F = fun(X) -> X end."
	" term_to_binary(F)."

	decoded := #[112 0 0 0 71 1 189 144 182 154 187 236 207 96 89 18 34 161 52 152 16 
  216 0 0 0 6 0 0 0 0 119 8 101 114 108 95 101 118 97 108 97 6 98 5 236 133 
  180 103 119 13 110 111 110 111 100 101 64 110 111 104 111 115 116 0 0 0 
  134 0 0 0 0 0].

	erlFun := (ErlangFun new) pid: (ErlangPid tag: 103 node: #'nonode@nohost' id: 134 serial: 0 creation: 0);
				module: #erl_eval; index: 6; oldIndex: 6; uniq: 99386804;
				arity: 1; freeVars: {} asOrderedCollection ;
				md5: #[189 144 182 154 187 236 207 96 89 18 34 161 52 152 16 216].

	self assert: (ErlangFunEncoder asByteArray: erlFun ) equals: decoded.
							
						
					
				
]
